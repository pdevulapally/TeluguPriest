// Om Ganesha Namah üïâÔ∏è
import { useState, useEffect } from "react";
import { Calendar } from "@/components/ui/calendar";
import { Calendar as CalendarIcon } from "lucide-react";
import { format } from "date-fns";
import { cn } from "@/lib/utils";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { toast } from "sonner";
import { useLanguage } from "@/contexts/LanguageContext";
import { BookingService } from "@/types/booking";
import { addBooking, getBookedDates } from "@/services/bookingService";
import { useNavigate } from "react-router-dom";
import { ArrowLeft } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { 
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle 
} from "@/components/ui/card";

const BookingPage = () => {
  const { language, t } = useLanguage();
  const [location, setLocation] = useState("");
  const [service, setService] = useState<BookingService | "">("");
  const [date, setDate] = useState<Date | undefined>(undefined);
  const [bookedDates, setBookedDates] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const navigate = useNavigate();
  
  // Personal details
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [phone, setPhone] = useState("");
  const [address, setAddress] = useState("");
  const [city, setCity] = useState("");
  const [country, setCountry] = useState("");
  const [notes, setNotes] = useState("");

  // Get the service from URL parameter if it exists
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const serviceParam = params.get('service');
    if (serviceParam && Object.values(BookingService).includes(serviceParam as BookingService)) {
      setService(serviceParam as BookingService);
    }
  }, []);
  
  useEffect(() => {
    // Load booked dates when component mounts
    const fetchBookedDates = async () => {
      try {
        const dates = await getBookedDates();
        setBookedDates(dates);
      } catch (error) {
        console.error("Error fetching booked dates:", error);
      }
    };
    
    fetchBookedDates();
    // Scroll to top when page loads
    window.scrollTo(0, 0);
  }, []);
  
  const isDateDisabled = (day: Date) => {
    // Check if the date is in the past
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    if (day < today) return true;
    
    // Check if the date is already booked
    return bookedDates.some(bookedDate => {
      const bookedDateObj = new Date(bookedDate);
      return day.toDateString() === bookedDateObj.toDateString();
    });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validation
    if (!fullName) {
      toast.error(t("Please enter your full name", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"));
      return;
    }
    
    if (!email) {
      toast.error(t("Please enter your email address", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"));
      return;
    }
    
    if (!phone) {
      toast.error(t("Please enter your phone number", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"));
      return;
    }
    
    if (!city || !country) {
      toast.error(t("Please enter your city and country", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞®‡∞ó‡∞∞‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø"));
      return;
    }
    
    if (!service) {
      toast.error(t("Please select a service", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞í‡∞ï ‡∞∏‡±á‡∞µ‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø"));
      return;
    }
    
    if (!date) {
      toast.error(t("Please select a date", "‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞§‡±á‡∞¶‡±Ä‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø"));
      return;
    }
    
    setIsLoading(true);
    
    try {
      // Create a new booking with additional fields
      const newBooking = {
        location,
        service,
        date: date.toISOString(),
        customerName: fullName,
        customerEmail: email,
        customerPhone: phone,
        address,
        city,
        country,
        notes
      };
      
      await addBooking(newBooking);
      
      // Show success notification
      toast.success(
        t("Booking request sent successfully!", "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞® ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞™‡∞Ç‡∞™‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")
      );
      
      // Set submitted to show thank you message
      setIsSubmitted(true);
      
      // Reset form after submission (not needed anymore as we're showing thank you message)
      // But keep it for now in case we want to use it later
      setLocation("");
      setFullName("");
      setEmail("");
      setPhone("");
      setAddress("");
      setCity("");
      setCountry("");
      setService("");
      setDate(undefined);
      setNotes("");
      
    } catch (error) {
      console.error("Error submitting booking:", error);
      toast.error(
        t("Failed to submit booking. Please try again.", "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞°‡∞Ç‡∞≤‡±ã ‡∞µ‡∞ø‡∞´‡∞≤‡∞Æ‡±à‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.")
      );
    } finally {
      setIsLoading(false);
    }
  };

  if (isSubmitted) {
    return (
      <div className="min-h-screen bg-cream flex items-center justify-center">
        <div className="container mx-auto px-4 py-8">
          <Card className="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg">
            <CardHeader className="text-center">
              <CardTitle className="text-2xl md:text-3xl font-bold text-maroon">
                {t("Thank You!", "‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å!")}
              </CardTitle>
              <CardDescription className="text-lg">
                {t("Your booking request has been submitted successfully.", "‡∞Æ‡±Ä ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞® ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.")}
              </CardDescription>
            </CardHeader>
            <CardContent className="text-center">
              <div className="mb-8">
                <p className="text-foreground mb-6">
                  {t(
                    "Thank you for choosing Pandit Eshwar Prasad for your puja services. We have received your booking request and will contact you shortly to confirm the details.",
                    "‡∞Æ‡±Ä ‡∞™‡±Ç‡∞ú‡∞æ ‡∞∏‡±á‡∞µ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞™‡∞Ç‡∞°‡∞ø‡∞§ ‡∞à‡∞∂‡±ç‡∞µ‡∞∞‡±ç ‡∞™‡±ç‡∞∞‡∞∏‡∞æ‡∞¶‡±ç ‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞Ç‡∞¶‡±Å‡∞ï‡±Å ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å. ‡∞Æ‡±á‡∞Æ‡±Å ‡∞Æ‡±Ä ‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞®‡±Å ‡∞∏‡±ç‡∞µ‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞æ‡∞Æ‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡∞®‡±Å ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞§‡±ç‡∞µ‡∞∞‡∞≤‡±ã ‡∞Æ‡∞ø‡∞Æ‡±ç‡∞Æ‡∞≤‡±ç‡∞®‡∞ø ‡∞∏‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞ø‡∞∏‡±ç‡∞§‡∞æ‡∞Æ‡±Å."
                  )}
                </p>
                <div className="mt-8 mb-4">
                  <Button 
                    onClick={() => navigate("/")}
                    className="bg-primary text-white"
                  >
                    {t("Return to Home", "‡∞π‡±ã‡∞Æ‡±ç‚Äå‡∞ï‡±Å ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡±Å")}
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-cream">
      <div className="container mx-auto px-4 py-8">
        <Button 
          variant="ghost" 
          onClick={() => navigate("/")}
          className="mb-6 flex items-center gap-2"
        >
          <ArrowLeft size={16} />
          {t("Back to Home", "‡∞π‡±ã‡∞Æ‡±ç‚Äå‡∞ï‡±Å ‡∞§‡∞ø‡∞∞‡∞ø‡∞ó‡∞ø ‡∞µ‡±Ü‡∞≥‡±ç‡∞≤‡±Å")}
        </Button>
        
        <div className="max-w-3xl mx-auto bg-white rounded-2xl shadow-lg p-6 md:p-8">
          <h2 className="text-2xl md:text-3xl font-bold text-maroon text-center mb-8">
            {t("Book Your Puja with Pandit Eshwar Prasad", "‡∞™‡∞Ç‡∞°‡∞ø‡∞§ ‡∞à‡∞∂‡±ç‡∞µ‡∞∞‡±ç ‡∞™‡±ç‡∞∞‡∞∏‡∞æ‡∞¶‡±ç ‡∞§‡±ã ‡∞Æ‡±Ä ‡∞™‡±Ç‡∞ú‡∞®‡±Å ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")}
          </h2>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="space-y-6">
              <h3 className="text-xl font-medium text-maroon">
                {t("Personal Information", "‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø‡∞ó‡∞§ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç")}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Full Name", "‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å")}*
                  </label>
                  <Input
                    placeholder={t("Enter your full name", "‡∞Æ‡±Ä ‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±Å‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    className="text-base"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Email Address", "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ")}*
                  </label>
                  <Input
                    type="email"
                    placeholder={t("Enter your email", "‡∞Æ‡±Ä ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="text-base"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Phone Number", "‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç")}*
                  </label>
                  <Input
                    placeholder={t("Enter your phone number", "‡∞Æ‡±Ä ‡∞´‡±ã‡∞®‡±ç ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç‚Äå‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    className="text-base"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Address", "‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ")}
                  </label>
                  <Input
                    placeholder={t("Enter your address", "‡∞Æ‡±Ä ‡∞ö‡∞ø‡∞∞‡±Å‡∞®‡∞æ‡∞Æ‡∞æ‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                    value={address}
                    onChange={(e) => setAddress(e.target.value)}
                    className="text-base"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("City", "‡∞®‡∞ó‡∞∞‡∞Ç")}*
                  </label>
                  <Input
                    placeholder={t("Enter your city", "‡∞Æ‡±Ä ‡∞®‡∞ó‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                    value={city}
                    onChange={(e) => setCity(e.target.value)}
                    className="text-base"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Country", "‡∞¶‡±á‡∞∂‡∞Ç")}*
                  </label>
                  <Input
                    placeholder={t("Enter your country", "‡∞Æ‡±Ä ‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø")}
                    value={country}
                    onChange={(e) => setCountry(e.target.value)}
                    className="text-base"
                  />
                </div>
              </div>
            </div>

            <div className="space-y-6">
              <h3 className="text-xl font-medium text-maroon">
                {t("Puja Details", "‡∞™‡±Ç‡∞ú‡∞æ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å")}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Select a puja service", "‡∞™‡±Ç‡∞ú‡∞æ ‡∞∏‡±á‡∞µ‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")}*
                  </label>
                  <Select value={service} onValueChange={(value) => setService(value as BookingService)}>
                    <SelectTrigger className="text-base">
                      <SelectValue placeholder={t("Select a service", "‡∞∏‡±á‡∞µ‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="satyanarayana">
                        {t("Satyanarayana Vratam", "‡∞∏‡∞§‡±ç‡∞Ø‡∞®‡∞æ‡∞∞‡∞æ‡∞Ø‡∞£ ‡∞µ‡±ç‡∞∞‡∞§‡∞Ç")}
                      </SelectItem>
                      <SelectItem value="barasala">
                        {t("Barasala (Naming)", "‡∞¨‡∞æ‡∞∞‡∞∏‡∞æ‡∞≤")}
                      </SelectItem>
                      <SelectItem value="gruhapravesam">
                        {t("Gruhapravesam", "‡∞ó‡±É‡∞π‡∞™‡±ç‡∞∞‡∞µ‡±á‡∞∂‡∞Ç")}
                      </SelectItem>
                      <SelectItem value="wedding">
                        {t("Vivaham (Wedding)", "‡∞µ‡∞ø‡∞µ‡∞æ‡∞π‡∞Ç")}
                      </SelectItem>
                      <SelectItem value="annaprasana">
                        {t("Annaprasana", "‡∞Ö‡∞®‡±ç‡∞®‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡∞®")}
                      </SelectItem>
                      <SelectItem value="upanayanam">
                        {t("Upanayanam", "‡∞â‡∞™‡∞®‡∞Ø‡∞®‡∞Ç")}
                      </SelectItem>
                      <SelectItem value="custom">
                        {t("Custom Puja", "‡∞ï‡∞∏‡±ç‡∞ü‡∞Æ‡±ç ‡∞™‡±Ç‡∞ú")}
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-foreground mb-1">
                    {t("Select a preferred date", "‡∞á‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞§‡±á‡∞¶‡±Ä‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")}*
                  </label>
                  <Popover>
                    <PopoverTrigger asChild>
                      <Button
                        variant={"outline"}
                        className={cn(
                          "w-full text-left font-normal justify-start",
                          !date && "text-muted-foreground"
                        )}
                      >
                        <CalendarIcon className="mr-2 h-4 w-4" />
                        {date ? format(date, "PPP") : t("Pick a date", "‡∞§‡±á‡∞¶‡±Ä‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø")}
                      </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={date}
                        onSelect={setDate}
                        disabled={isDateDisabled}
                        initialFocus
                        className="pointer-events-auto"
                        modifiers={{
                          booked: (date) => bookedDates.some(bookedDate => 
                            new Date(bookedDate).toDateString() === date.toDateString()
                          )
                        }}
                        modifiersClassNames={{
                          booked: "bg-red-100 text-red-600 line-through opacity-70"
                        }}
                      />
                    </PopoverContent>
                  </Popover>
                  <p className="text-xs text-muted-foreground mt-1">
                    {t("Dates highlighted in red are already booked", "‡∞é‡∞∞‡±Å‡∞™‡±Å ‡∞∞‡∞Ç‡∞ó‡±Å‡∞≤‡±ã ‡∞π‡±à‡∞≤‡±à‡∞ü‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä‡∞≤‡±Å ‡∞á‡∞™‡±ç‡∞™‡∞ü‡∞ø‡∞ï‡±á ‡∞¨‡±Å‡∞ï‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø")}
                  </p>
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-foreground mb-1">
                  {t("Additional Notes", "‡∞Ö‡∞¶‡∞®‡∞™‡±Å ‡∞ó‡∞Æ‡∞®‡∞ø‡∞ï‡∞≤‡±Å")}
                </label>
                <Textarea
                  placeholder={t("Any special requests or information about the puja", "‡∞™‡±Ç‡∞ú ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±á‡∞ï ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞≤‡±Å ‡∞≤‡±á‡∞¶‡∞æ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç")}
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  rows={4}
                />
              </div>
            </div>

            <div className="pt-6">
              <p className="text-sm text-muted-foreground mb-4">
                {t("Fields marked with * are required", "* ‡∞ó‡±Å‡∞∞‡±ç‡∞§‡±Å‡∞§‡±ã ‡∞∏‡±Ç‡∞ö‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞® ‡∞´‡±Ä‡∞≤‡±ç‡∞°‡±ç‚Äå‡∞≤‡±Å ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç")}
              </p>
              <Button
                type="submit"
                className="bg-primary text-white w-full text-lg py-6"
                disabled={isLoading}
              >
                {isLoading ? 
                  t("Submitting...", "‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø...") : 
                  t("Submit Booking Request", "‡∞¨‡±Å‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞®‡±Å ‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø")}
              </Button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default BookingPage;
